# yaml-language-server: $schema=./values.schema.json

vcs.revision: VCS_REVISION_NUMBER # Added by the pipeline automatically

image:
  pullPolicy: IfNotPresent

global:
  # NOTE: DO NOT DELETE global.registry values.
  #       It is to be set at deployment time and must refer to the image registry.
  #       If NCM importer tool is used, that sets these values.
  #registry:  #GLOBAL_REGISTRY#
  #registry1: #GLOBAL_REGISTRY1#
  #registry2: #GLOBAL_REGISTRY2#
  #registry3: #GLOBAL_REGISTRY3#
  #registry4: #GLOBAL_REGISTRY4#

  node:
    worker:
      # Node selector and toleration values for all NWaC business logic pods.
      nodeSelector: {}
      tolerations: []
    edge:
      # Node selector and toleration values for all NWaC edge pods.
      # Kubernetes only schedules the Pod onto nodes that have *each* of the labels specified. If "is_edge=true" needed, uncomment the next line.
      # nodeSelector: {is_edge: 'true'}
      tolerations:
        - key: "is_edge"
          operator: "Equal"
          value: "true"
          effect: "NoExecute"

  # Default autoscaling boundaries; they can be overridden on a per service basis
  autoScaling: # true/false: whether to create horizontal autoscaler or not
  replicaCount: # minimum number of replicas
  maxReplicaCount: # maximum number or replicas

  ingress:
    global: # Global is a special ingress descriptor. Define kongPlugins that are valid for all the ingresses globally here.
      kongPlugins: # List of global Kong plugins (name+config) for all the services globally.
        - name: prometheus
    northbound-developer:
      url: "" # Northbound (public) URL where NWaC docs are accessible. Often returned in Location header of "201 Created". If path is defined then that is used at the Ingress resource.
      httpenabled: false
      secretname: "" # Secret containing server TLS certificates.
      clientCA: # Secret containing file "ca.crt" in PEM format, containing all the client mTLS CAs to be accepted. If not specified, then any client is accepted.
      kongPlugins: # List of global Kong plugins (name+config) for all the services
      # - name: plugin-name
      #   config:
      #     variable: value
      services:
        mashup-py:
          url: http://($.Release.Name)-mashup-py:8000
          path: /docs
    northbound:
      #url: "http://demo-lab.dyn.nesc.nokia.net" # Northbound (public) URL where NWaC API is accessible. Often returned in Location header of "201 Created". If path is defined then that is used at the Ingress resource.
      url: "http://north.localhost"
      httpenabled: true
      secretname: "" # Secret containing server TLS certificates.
      clientCA: # Secret containing file "ca.crt" in PEM format, containing all the client mTLS CAs to be accepted. If not specified, then any client is accepted.
      kongPlugins: # List of global Kong plugins (name+config) for all the services
      services:
        capif-ccf:
          url: http://($.Release.Name)-capif-ccf:8080
          path: /capif-security
        csp-lookup: # depending on solution, might not be necessary
          url: http://($.Release.Name)-csp-lookup:8080
          path: /onboardcsp,/onboardids

    southbound:
      #url: "http://demo-lab.dyn.nesc.nokia.net" # Southbound (private) URL where NWaC is accessible. Often used in requests as base of callback URL. If path is defined then that is used at the Ingress resource.
      url: "http://south.localhost"
      httpenabled: true
      secretname: "" # Secret containing server TLS certificates.
      clientCA: # Secret containing file "ca.crt" in PEM format, containing all the client mTLS CAs to be accepted. If not specified, then any client is accepted.
      kongPlugins: # List of global Kong service plugins (name+config) for all services
      # - name: plugin-name
      #   config:
      #     variable: value
      services:
        nefrelay:
          url: http://($.Release.Name)-nef-relay:8080
          path: /notif
        prometheus:
          url: http://($.Release.Name)-cpro-server:80
          path: /prometheus
        mashup-studio:
          url: http://($.Release.Name)-mashup-studio:8080
          path: /mashup

  egressTLS:
    northbound:
      mutualTLS: true
      ownTLSSecret: # If not set, and mutualTLS is true, then ingress secretname is used.
      caCertSecret:
    southbound:
      mutualTLS: true
      ownTLSSecret: # If not set, and mutualTLS is true, then ingress secretname is used.
      caCertSecret:

  proxy: # Forward proxy parameters for outgoing HTTP connections.
    http: # HTTP proxy to be used, e.g. "http://proxy.example.com:8080".
    https: # HTTP proxy to be used for HTTPS connections, e.g. "http://proxy.example.com:8080".
    none: 127.0.0.1,localhost,.svc # Comma separated list of destination addresses where forward proxy is not to be used, e.g. "10.0.0.0/8,example.com". For IP addresses CIDR notation can be used. For domain names the name and its subdomains are matched. If name starts with dot, then applies to subdomains only.

  geoCassandra:
    hosts: "dbcass-ccas-apache.dbcass.svc.cluster.local" # Comma separated host addresses, e.g. "1.2.3.4,11.22.33.44".
    hostDiscovery: false # If all central DB nodes (pods) are accessible, then you can set it "true" for better performance.
    port: 9042
    username: "nef" # Role name used by microservices.
    password: "bjNmUDRzcw==" # Password in base64 encoded form. Lets secret nef-geo-cassandra-credentials to be automatically generated. Optional.
    credentialsSecret: nef-geo-cassandra-credentials # K8s secret containing username and base64-encoded password. If username and password are provided then this secret is generated automatically.
    adminUsername: "suadmincass" # Admin role name in Cassandra.
    adminPassword: dG9wc2VjcmV0 # Admin password in base64 encoded form. Lets secret nef-geo-cassandra-admin-credentials to be automatically generated. Optional.
    consistency: "LOCAL_QUORUM" # Read and write consistency for generic DB transactions.
    strategy: NetworkTopologyStrategy # Cassandra Replication Strategy (eg: "SimpleStrategy" or "NetworkTopologyStrategy")
    DCReplication:
      MyCenter: 1 # Used with NetworkTopologyStrategy. The total number of replicas for the keyspace, specified separately for the Cassandra datacenters. DC name is case sensitive
    ownTLSSecret: "" # K8s secret containing tls.crt and tls.key. Needed if Cassandra authenticates the client (mTLS).
    caCertSecret: "" # K8s secret containing PEM certificate files (*.pem or *.crt) used to authenticate Cassandra server.

  metrics:
    distillResult: true # true/false; enable to distill dynamic counters' http result codes into centigrade classes, like 400, 404 -> 4xx

ckng:
  enabled: true # Set to false if CKNG (Kong + operators) installation is not needed. E.g. there is a clusterwise CKNG installation, independent of NWaC.
  service:
    ports:
      proxy:
        port_ssl: 8443
  config:
    replicas: 1 # Number of CKNG replicas.
    environment:
      KONG_UNTRUSTED_LUA: "on" # Set "on" if Kong stateless plugin or NWaC callout is configured on any ingress.
      KONG_DNS_ORDER: "LAST,A,SRV,CNAME"
  ckng:
    hpa:
      enabled: true # Set according to whether automatic or manual scaling is preferred.
      minReplicas: 2
      maxReplicas: 10
  ckng-operator:
    replicas: 1
    namespaceMode:
      enabled: true # Watch for CKNG CRDs in NWaC's namespace only.
    multitenant:
      clientNamespacePrefix: false # Add the namespace as prefix to oauth2-realm and token-pep-keycloak plugins' "clientId" fields

apigw: # Define API GW service here, if ckng is NOT enabled. Ingress will use this backend then. E.g. there is a clusterwise CKNG installation, independent of NWaC.
  name: # Service name
  port: # Service port

ingress:
  enabled: true # Set to false if you have your own ingress controller. Otherwise true. Note that NWaC may use Nginx Ingress Controller specific mTLS and path prefix annotations.
  controller:
    httpPort: 80
    httpsPort: 443
    disableHttpPortListening: false # Whether to completely disable clear text HTTP listening port.
    bindAddress: "" # Comma separated list of IP addresses to accept connections on. May be used if serving on a specific interface is desired.
    securityContextPrivileged: # If bindAddress is non-local, then set to true.
    kind: Deployment # DaemonSet or Deployment.
    replicaCount: 1 # Number of replicas, if kind=Deployment. For DaemonSet the number of selected nodes determines the number of replicas.
    ingressClassResource:
      enabled: true
      name: nef-ingress
    config:
      proxy-read-timeout: 150 # required for Monte Location Immediate Requests
    # nodeSelector: {}
    # tolerations: [{"key":"is_edge", "operator":"Equal", "value":"true", "effect":"NoExecute"}]
    service: # K8s Service resource parameters
      type: ClusterIP # ClusterIP / LoadBalancer
      externalIPs: [10.94.135.182] # List of IP addresses at which the ingress controller services are available. Such as edge node IP addresses. https://kubernetes.io/docs/user-guide/services/#external-ips

certManager:
  enabled: false # Set true if cert-manager.io is to manage NWaC ingress, egress and database connection TLS certificates.
  northbound: # Public certificate
    issuerRef:
      name: ncms-ca-issuer # Name of the issuer resource for northbound.
      kind: ClusterIssuer # Kind of the issuer resource. ClusterIssuer or Issuer (namespace local)
    privateKey:
      algorithm: Ed25519 # If cert-manager.io API version is pre-v1, then only RSA, for v1 RSA, Ed25519 and ECDSA are supported.
      size: # Key bit size of private key. Must be 2048, 4096 or 8192 for RSA algorithm. Must be 256, 384 or 521 for ECDSA. Leave empty for Ed25519.
  southbound: # Private certificate
    issuerRef:
      name: ncms-ca-issuer # Name of the issuer resource.
      kind: ClusterIssuer # Kind of the issuer resource. ClusterIssuer or Issuer (namespace local)
    privateKey:
      algorithm: Ed25519 # If cert-manager.io API version is pre-v1, then only RSA, for v1 RSA, Ed25519 and ECDSA are supported.
      size: # Key bit size of private key. Must be 2048, 4096 or 8192 for RSA algorithm. Must be 256, 384 or 521 for ECDSA. Leave empty for Ed25519.
  db: # Certificate for DB.
    issuerRef:
      name: ncms-ca-issuer # Name of the issuer resource.
      kind: ClusterIssuer # Kind of the issuer resource. ClusterIssuer or Issuer (namespace local)
    privateKey:
      algorithm: RSA # If cert-manager.io API version is pre-v1, then only RSA, for v1 RSA, Ed25519 and ECDSA are supported.
      size: 2048 # Key bit size of private key. Must be 2048, 4096 or 8192 for RSA algorithm. Must be 256, 384 or 521 for ECDSA. Leave empty for Ed25519.
  duration: 8760h # 365 days
  renewBefore: 360h # 15d
  applyCron: "0 23 * * 6" # Cron job schedule of applying any new certificate, using rollout restarts. Default is every Sunday mid-night.

cpro:
  enabled: true
  restrictedToNamespace: true # If the flag is set to true, then server component scrape the metrics within listed namespaces.
  server:
    namespaceList: ["($.Release.Namespace)"] # If the restrictedToNamespace flag is set to true, then list the namespaces to monitor in comma-separated values.
    baseURL: "http://localhost/prometheus"
    cbur:
      enabled: false
    persistentVolume:
      size: 16Gi #Size of database volume. cpro default = 16Gi
    retention:
      time: 1d #Duration = How long the metric data is stored in the database. cpro default = 15d. (15days)
  alertmanager:
    enabled: false
  nodeExporter:
    enabled: false
  kubeStateMetrics:
    args:
      namespace: "($.Release.Namespace)" # Comma-separated list of namespaces to be enabled.

  customScrapeJobs:
    - job_name: nef-services
      scheme: http
      scrape_interval: 10s
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - "($.Release.Namespace)" # Optional namespace discovery. If omitted, all namespaces are used.
      relabel_configs:
        # add service name as label to the scrapped metrics
        - source_labels: [__meta_kubernetes_service_label_app]
          regex: (ckng)
          action: keep
        - source_labels: [__meta_kubernetes_service_name]
          separator: ;
          regex: (.*)
          target_label: service
          replacement: $1
          action: replace

    - job_name: api
      scheme: http
      scrape_interval: 10s
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - "($.Release.Namespace)" # Optional namespace discovery. If omitted, all namespaces are used.
      relabel_configs:
        # add service name as label to the scrapped metrics
        - source_labels: [__meta_kubernetes_service_label_app]
          regex: (nef-relay)$
          action: keep
        - source_labels: [__meta_kubernetes_service_name]
          separator: ;
          regex: (.*)
          target_label: service
          replacement: $1
          action: replace
        - source_labels:
            [
              __address__,
              __meta_kubernetes_service_annotation_prometheus_io_port,
            ]
          action: replace
          target_label: __address__
          regex: (.+)(?::\d+);(\d+)
          replacement: $1:$2

    - job_name: api-misc # You can remove the "-misc" suffix after the MISC has implemented in every MS that are listed in the `api` job above # Then remove this comment
      scheme: http
      scrape_interval: 10s
      kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
              - "($.Release.Namespace)" # Optional namespace discovery. If omitted, all namespaces are used.
      relabel_configs:
        - action: keep
          regex: (traffic-influence) # Move the MS name here from the `api` job above # When every MS has been moved down here, remove the `api` job above, and rename this job
          source_labels: [__meta_kubernetes_pod_label_app]
        - action: keep
          regex: metrics
          source_labels: [__meta_kubernetes_pod_container_port_name]
        - action: replace
          separator: ;
          regex: (.*)
          replacement: $1
          target_label: service
          source_labels: [__meta_kubernetes_service_name]
        - action: replace
          regex: (.+):(?:\d+);(\d+)
          replacement: ${1}:${2}
          target_label: __address__
          source_labels:
            [__address__, __meta_kubernetes_pod_container_port_number]

    - job_name: diameter_messages
      scheme: http
      scrape_interval: 10s
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - "($.Release.Namespace)" # Optional namespace discovery. If omitted, all namespaces are used.
      relabel_configs:
        # add service name as label to the scrapped metrics
        - source_labels: [__meta_kubernetes_service_label_app]
          regex: (daco)
          action: keep
        - source_labels: [__meta_kubernetes_service_name]
          separator: ;
          regex: (.*)
          target_label: service
          replacement: $1
          action: replace
        - source_labels:
            [
              __address__,
              __meta_kubernetes_service_annotation_prometheus_io_port,
            ]
          action: replace
          target_label: __address__
          regex: (.+)(?::\d+);(\d+)
          replacement: $1:$2

#end customScrapeJobs - Do not remove this comment

csp-lookup:
  enabled: true
  replicaCount: # minimum number of replicas
  maxReplicaCount: # maximum number or replicas
  logLevel:
  cassandra:
    keyspace: "csp_lookup"

nef-relay:
  enabled: true
  replicaCount: # minimum number of replicas
  maxReplicaCount: # maximum number or replicas
  logLevel:
  cspsAuthSecretRef: test-nef-secret # Contains NWaC clientID('xclientid') and client secret('xclientsecret') for authenticating towards CSPs

dbscripts:
  enabled: true

capif-ccf: # The Common API Framework (CAPIF) provides mechanisms for AFs to search, discover and invoke 3GPP Northbound APIs in a consistent manner.
  enabled: true # Set false to use external API GW.
  replicaCount: 1 # minimum number of replicas
  maxReplicaCount: 1 # maximum number or replicas

  # LogLevel can be used to limit the importance of visible log messages
  # Possible values are "fatal", "error", "warn", "info", "debug", "trace"
  # in decreasing importance.
  logLevel: "info"
  config:
    token:
      expirationSecond: 300

  auth:
    enabled: false
    # Secret contain a RSA private and public key which used to generate jwt tokens for authorization.
    # (k8s generic secret with data named 'privateKey' and 'publicKey' )
    secret:
    ietfOauth2: false #If true, then authentication work like oauth2.0 client_credentials flow, otherwise 3gpp 29.222.

  # If you want this microservice's convergedCharging behaviour to differ from the global convergedCharging settings, fill theese parameters below:
  convergedCharging:
    enabled: # true/false; enable converged charging interface for northbound API
    ratingGroup: # a number sent as the rating group parameter
    failureHandling: # continue/terminate; allow or reject requests if charging is not working

mashup-py:
  enabled: true
  replicaCount: 1
  scriptsCM: nac-api-scripts # ConfigMap containing scripts.
  rapidAPIHeaderCheck: # Set "true" if "X-RapidAPI-Proxy-Secret" header verification is enabled, else "false"
  rapidapiSecret: # Secret containing API specific "X-RapidAPI-Proxy-Secret" values, key=app.Title + _secret

mashup-studio:
  enabled: true
  replicaCount: 1
  scriptsCM: nac-api-scripts # ConfigMap containing scripts.
  pluginBaseName: # Name of the service from where the plugins are to be copied for the new scripts, if a script is exposed.
  softDeleteTTLinDays: # Natural number between 1-7300. Number of days until a soft-deleted script will be removed from cassandra database. Default value is set in configmamp.

